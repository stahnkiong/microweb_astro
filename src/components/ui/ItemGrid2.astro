---
import type { ItemGrid as Props } from '~/types';
import { Icon } from 'astro-icon/components';
import { twMerge } from 'tailwind-merge';
import Button from './Button.astro';

const { items = [], columns, defaultIcon = '', classes = {} } = Astro.props;

const {
  container: containerClass = '',
  // container: containerClass = "sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3",
  panel: panelClass = '',
  title: titleClass = '',
  description: descriptionClass = '',
  icon: defaultIconClass = 'text-primary',
} = classes;
---

{
  items && (
    <div
      class={twMerge(
        `grid gap-8 gap-x-12 sm:gap-y-8 ${
          columns === 4
            ? 'lg:grid-cols-4 md:grid-cols-3 sm:grid-cols-2'
            : columns === 3
              ? 'lg:grid-cols-3 sm:grid-cols-2'
              : columns === 2
                ? 'sm:grid-cols-2 '
                : ''
        }`,
        containerClass
      )}
    >
      {items.map(({ title, description, icon, callToAction, classes: itemClasses = {} }) => (
        <div class={twMerge('relative flex flex-col', panelClass, itemClasses?.panel)}>
          <div class="flex justify-between">
            {(icon || defaultIcon) && (
              <Icon name={icon || defaultIcon} class={twMerge('w-10 h-10', defaultIconClass, itemClasses?.icon)} />
            )}
            {callToAction && (
              <div class="mt-6">
                <Button {...callToAction} />
              </div>
            )}
          </div>
          <div class={twMerge('text-xl text-gradient group-hover:invert group-hover:brightness-75 transition duration-700 font-bold mt-2', titleClass, itemClasses?.title)} set:html={title}/>
          {description && (
            <p class={twMerge("text-[15px] mt-4 after:content-['...'] group-hover:after:hidden", descriptionClass, itemClasses?.description)} set:html={description} />
            <Icon name="carbon:chevron-sort-down" class="bottom-10 absolute opacity-50 self-end w-5 h-5 group-hover:hidden"/>
          )}
        </div>
      ))}
    </div>
  )
}
